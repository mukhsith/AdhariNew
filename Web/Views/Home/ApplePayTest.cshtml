@{
    Layout = "_Layout";
}
<script src="https://applepay.cdn-apple.com/jsapi/v1/apple-pay-sdk.js"></script>
<style>
    apple-pay-button {
        --apple-pay-button-width: 150px;
        --apple-pay-button-height: 30px;
        --apple-pay-button-border-radius: 3px;
        --apple-pay-button-padding: 0px 0px;
        --apple-pay-button-box-sizing: border-box;
    }
</style>
<section class="main-content py-5 mb-5">
    <div class="container pt-5">
        <div class="row pt-5">
            <div class="col-12 col-md-6 mx-auto">
                <apple-pay-button buttonstyle="black" type="plain" locale="en"></apple-pay-button>
            </div>
        </div>
    </div>
</section>
<script>
    $("apple-pay-button").click(function () {
        onApplePayButtonClicked();
    });

    function onApplePayButtonClicked() {
        debugger;
        if (!ApplePaySession) {
            return;
        }

        // Define ApplePayPaymentRequest
        const request = {
            "countryCode": "KW",
            "currencyCode": "KWD",
            "merchantCapabilities": [
                "supports3DS"
            ],
            "supportedNetworks": [
                "visa",
                "masterCard",
                "amex",
                "discover"
            ],
            "total": {
                "label": "Adhari",
                "type": "final",
                "amount": "1.99"
            }
        };

        // Create ApplePaySession
        const session = new ApplePaySession(3, request);

        session.onvalidatemerchant = async event => {
            // Call your own server to request a new merchant session.
            const merchantSession = await validateMerchant();
            session.completeMerchantValidation(merchantSession);
        };

        session.onpaymentmethodselected = event => {
            // Define ApplePayPaymentMethodUpdate based on the selected payment method.
            // No updates or errors are needed, pass an empty object.
            const update = {};
            session.completePaymentMethodSelection(update);
        };

        session.onshippingmethodselected = event => {
            // Define ApplePayShippingMethodUpdate based on the selected shipping method.
            // No updates or errors are needed, pass an empty object.
            const update = {};
            session.completeShippingMethodSelection(update);
        };

        session.onshippingcontactselected = event => {
            // Define ApplePayShippingContactUpdate based on the selected shipping contact.
            const update = {};
            session.completeShippingContactSelection(update);
        };

        session.onpaymentauthorized = event => {
            // Define ApplePayPaymentAuthorizationResult
            const result = {
                "status": ApplePaySession.STATUS_SUCCESS
            };
            session.completePayment(result);
        };

        session.oncouponcodechanged = event => {
            // Define ApplePayCouponCodeUpdate
            const newTotal = calculateNewTotal(event.couponCode);
            const newLineItems = calculateNewLineItems(event.couponCode);
            const newShippingMethods = calculateNewShippingMethods(event.couponCode);
            const errors = calculateErrors(event.couponCode);

            session.completeCouponCodeChange({
                newTotal: newTotal,
                newLineItems: newLineItems,
                newShippingMethods: newShippingMethods,
                errors: errors,
            });
        };

        session.oncancel = event => {
            // Payment cancelled by WebKit
        };

        session.begin();
    }
</script>