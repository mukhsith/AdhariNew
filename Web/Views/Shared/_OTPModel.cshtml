<div class="modal fade" id="OTPModal" tabindex="-1" aria-labelledby="OTPModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-primary" id="OTPModalTitle">@SharedHtmlLocalizer["VerifyMobileNumber"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12 ">
                        <div class="bg-light-secondary p-4 rounded">
                            <form>
                                <div class="row justify-content-center">
                                    <div class="col-12 text-center">
                                        <div class="col-sm-12 text-center">
                                            <p class="mb-0" id="pVerificationMessage"></p>
                                        </div>
                                    </div>
                                    <div class="col-12 col-lg-8">
                                        <div id="otp" class="row align-items-center " style="direction: ltr;">
                                            <div class="col-3 my-1">
                                                <input type="number" class="form-control rounded-3 text-center fs-4" placeholder="" id="otp1" min="0" max="9" maxlength="1" pattern="[0-9]">
                                            </div>
                                            <div class="col-3 my-1">
                                                <input type="number" class="form-control rounded-3 text-center fs-4" placeholder="" id="otp2" min="0" max="9" maxlength="1" pattern="[0-9]">
                                            </div>
                                            <div class="col-3 my-1">
                                                <input type="number" class="form-control rounded-3 text-center fs-4" placeholder="" id="otp3" min="0" max="9" maxlength="1" pattern="[0-9]">
                                            </div>
                                            <div class="col-3 my-1">
                                                <input type="number" class="form-control rounded-3 text-center fs-4" placeholder="" id="otp4" min="0" max="9" maxlength="1" pattern="[0-9]">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12 text-center">
                                <div id="timer" class="mb-3">04:59</div>
                            </div>
                            <div class="col-12 text-center">
                                <button id="resend" type="button" class="btn btn-secondary text-light rounded-pill me-1">@SharedHtmlLocalizer["ResendOTP"]</button>
                                <a href="#" class="btn btn-primary rounded-pill ms-1 verify-otp-button" id="otp-button">@SharedHtmlLocalizer["VerifyOTP"]</a>
                                <input type="hidden" id="requestId" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function OTPInput() {
        var inputs = document.querySelectorAll('#otp  *[id]');
        for (let i = 0; i < inputs.length; i++) {
            inputs[i].addEventListener('keydown', function (event) {
                if (event.key === "Backspace") {
                    inputs[i].value = '';
                    if (i !== 0) {
                        inputs[i - 1].focus();
                        var txtOtp = inputs[i - 1].id;
                        $("#" + txtOtp).removeAttr("readonly");
                    }
                } else {
                    if (inputs[i].value !== '') {
                        event.preventDefault();
                    } else if ((event.keyCode > 47 && event.keyCode < 58) || (event.keyCode >= 96 && event.keyCode <= 105)) {
                        if (inputs[i].value !== '') {


                        } else {
                            inputs[i].value = event.key;
                            if (i !== inputs.length - 1) {
                                inputs[i + 1].focus();
                                var txtOtp = inputs[i + 1].id;
                                $("#" + txtOtp).removeAttr("readonly");
                            }
                            event.preventDefault();
                        }
                    } else if (event.keyCode > 64 && event.keyCode < 91) {
                        inputs[i].value = String.fromCharCode(event.keyCode);
                        // if (i !== inputs.length - 1) inputs[i +
                        //     1].focus();
                        event.preventDefault();
                    }
                }
            });
        }
    }

    function startTimer() {
        var presentTime = document.getElementById('timer').innerHTML;
        var timeArray = presentTime.split(/[:]+/);

        var m = timeArray[0];
        var s = checkSecond((timeArray[1] - 1));
        if (s == 59) {
            m = m - 1
        }
        if (m < 0) {
            return
        }
        document.getElementById('timer').innerHTML = m + ":" + s;
        console.log(m);
        if (m === '0' && s === '00') {
            $("#resend").show();
            $("#otp-button").hide();
        }
        else {
            setTimeout(startTimer, 1000);
        }
    }

    function checkSecond(sec) {
        if (sec < 10 && sec >= 0) {
            sec = "0" + sec
        }; // add zero in front of numbers < 10
        if (sec < 0) {
            sec = "59"
        };
        return sec;
    }

    function millisToMinutesAndSeconds(millis) {
        var minutes = Math.floor(millis / 60000);
        var seconds = ((millis % 60000) / 1000).toFixed(0);
        return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
    }
</script>